Design
======



Key Selling Points
++++++++++++++++++

PySide is the recommended first stop for developers willing to use Python with
Qt and QML. QmlPython is an experimental, alternative design that capitalizes on
the fact that the only module strictly needed from Qt is QML.

There is no such thing as "QmlPython application". When the developer uses QmlPython, he either

- Creates a plain Qt C++ application from which he instantiates QmlPython
  runtime, exposing it in his QDeclarativeContext or

- Imports QmlPython as a plugin (second priority)

QmlPython is implemented using the official Python C api. Therefore you
obviously need a python interpreter (either libpython, or statically linked
python).

Current plan is to license it with a liberal license (MIT/BSD).

Exposed APIs
++++++++++++

We plan to expose the following API's:
    
* Import python modules

* exac/eval python expressions, receive the eval results in js side (through json)

* Compile python code for later running?

* Maintain references to PyObjects in qml/js?

* Facility to convert simple Python types (bool, str, unicode, int, list, dict)
  to QVariant and vice versa for marshalling/unmarshalling parameters?
  -> Here, we could use QDataStream + QBuffer to serialize/unserialize the data,
     which might be more efficient than the comparable JSON encoding

     see http://apidocs.meego.com/1.0/mtf/mremoteaction_8cpp_source.html for
     how it serializes/unserializes the data. Questions? Ask thp

Signals
+++++++

No QObject subclassing will happen on python side. It's not clear Qt signals as
such will be needed in the first place - it might be simpler to allow python to
call javascript callbacks directly. For this, we probably need a python type
that wraps a QScriptValue (or simply use PyCObject_FromVoidPtr /
PyCObject_AsVoidPtr to wrap a pointer to QScriptValue for passing in C - if it
can be an opaque object that is just returned from the api and passed back
somewhere else)

